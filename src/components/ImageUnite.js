import React, { useState, useEffect } from "react";
import fixPic from "../img/fixPic.jpeg";
import { Link } from "react-router-dom";
import { ImSpinner3 } from "react-icons/im";

export default function ImageUnite({ data }) {
  // check if error exists
  const error = data[0]?.error;
  // get searched word for alt attribute
  const word = error ? "" : data[0]?.word;

  // Initialize state
  const [imageData, setImageData] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  // Update state with stored data when word changes
  useEffect(() => {
    const localData = localStorage.getItem(word);
    if (localData) {
      const localJsonData = JSON.parse(localData);
      setImageData(localJsonData);
    } else {
      setImageData({
        word,
        image_url: "",
        showGenerate: true,
        isGenerated: false,
      });
    }
  }, [word]);

  // Store state in local storage when it changes
  useEffect(() => {
    if (imageData.word) {
      localStorage.setItem(imageData.word, JSON.stringify(imageData));
    }
  }, [imageData]);

  const meanings = [];
  const examples = [];
  if (error === undefined) {
    // Going through the dictionary API to get first one definition
    data.slice(0, 1).forEach((element) =>
      element.meanings.forEach((set) => {
        set.definitions.slice(0, 1).forEach((definition) => {
          meanings.push(definition.definition);
        });
        set.definitions.forEach((definition) => {
          examples.push(definition.example);
        });
      })
    );
  }
  const meaningsStr =
    meanings.length > 0
      ? "The word can mean " + meanings.join(", ") + " and so on. "
      : "";
  const examplesStr =
    examples.length > 0
      ? "In a sentence, it could be used like " +
        examples.join(", ") +
        " and so on. "
      : "";
  // eslint-disable-next-line
  const prompt = `Generate an image representing the word '${word}' along with its meanings and potential context. ${meaningsStr}${examplesStr}Create an image that encapsulates the essence of this word in a visually compelling manner.`;

  // funtion that will be generated when we click on the button
  const imageGenerator = async () => {
    // Set loading state to true
    setIsLoading(true);
    // this mean that if we don't add anything in the input field, it won't return anything
    if (error || !word) {
      return 0;
    }
    const response = await fetch(
      "https://api.openai.com/v1/images/generations",
      {
        // using POST to make a request to the server
        method: "POST",
        headers: {
          "content-Type": "application/json",
          Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
          "User-agent": "Chrome",
        },
        body: JSON.stringify({
          // this will give the text return in the input field
          prompt: word,
          // 1 because we want only one image
          n: 1,
          size: "512x512",
        }),
      }
    );
    // // Fake data for testing
    // const response = {
    //   json: async () => ({
    //     data: [
    //       {
    //         url: images,
    //       },
    //     ],
    //   }),
    // };

    // return a promise, the data from the response body is stored in the variable data
    let res = await response.json();
    // // get the data property from the data object
    let res_data = res.data;
    // console.log(data);
    if (res_data[0].url) {
      setImageData({
        word,
        image_url: res_data[0].url,
        showGenerate: false,
        isGenerated: true,
      });
    }
    // When the image is generated, set loading state to false
    setIsLoading(false);
  };

  return (
    !error && (
      <>
        {/* using a ternary operator if image_url is true we show the default image if false we show the image provided by the OpenAI api */}
        <img src={imageData.image_url || fixPic} alt={word} />
        {imageData.showGenerate && !isLoading && (
          <>
            <div>
              Create an image of&nbsp;
              <code>{word}</code>
            </div>
            <button
              className="btn-primary"
              onClick={() => {
                imageGenerator();
              }}
            >
              Generate
            </button>
          </>
        )}
        {isLoading && (
          <ImSpinner3 className="animate-spin h-8 w-8 my-2 text-fuchsia-300" />
        )}
        {imageData.isGenerated && (
          <>
            <p className="text-sm text-gray-400">
              This image is generated by OpenAI, you can use it for writing
              practice.
            </p>
            <Link to="/home/practice" title="Click to practice writing">
              <button className="btn-primary">Practice</button>
            </Link>
          </>
        )}
      </>
    )
  );
}
